* 

```
class Solution {
    // BFS
    public Node connect(Node root) {
        // 判断边界条件
        if (root == null) {
            return root;
        }
        // 初始化队列          
        Queue<Node> queue = new LinkedList<Node>();
        // 根节点入队
        queue.add(root);
        // 当队列不为空
        while (!queue.isEmpty()) {
            // 每一层的数量
            int levelCount = queue.size();
            // 前一个节点
            Node pre = null;
            for (int i = 0 ; i < levelCount ; i++) {
                // 出队
                Node node = queue.poll();
                // 如果pre为空就表示node节点是这一行的第一个
                // 没有前一个节点指向他，否则就让前一个节点指向他
                if (pre != null) {
                    pre.next = node;
                }
                // 然后再让当前节点成为前一个节点
                pre = node;
                // 左右子节点如果不为空就入队
                if (node.left != null) {
                    queue.add(node.left);
                }                    
                if (node.right != null) {
                    queue.add(node.right);
                }                    
            }
        }
        return root;
    }
}
```

